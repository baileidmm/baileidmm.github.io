<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[白 Blog]]></title>
  <link href="http://baileidmm.github.io/atom.xml" rel="self"/>
  <link href="http://baileidmm.github.io/"/>
  <updated>2015-07-17T00:27:45+08:00</updated>
  <id>http://baileidmm.github.io/</id>
  <author>
    <name><![CDATA[Your Name]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[iOS event]]></title>
    <link href="http://baileidmm.github.io/blog/2015/07/17/ios-event/"/>
    <updated>2015-07-17T00:24:45+08:00</updated>
    <id>http://baileidmm.github.io/blog/2015/07/17/ios-event</id>
    <content type="html"><![CDATA[<h1>事件处理的事件传递</h1>

<h2>简介：</h2>

<p>发生触摸事件后，系统会将该事件加入到一个由UIApplication管理的事件 队列中，UIApplication会从事件队列中取出最前面的事件，并将事件分发下去以便处理，通常，先发送事件给应用程序的主窗口（keyWindow）</p>

<h2>UIView不接受触摸事件的三种情况：</h2>

<ol>
<li>不接收用户交互
userInteractionEnabled = NO</li>
<li>隐藏
hidden = YES</li>
<li>透明
alpha = 0.0 ~ 0.01</li>
</ol>


<p>提示：UIImageView的userInteractionEnabled默认就是NO，因此UIImageView以及它的子控件默认是不能接收触摸事件的</p>

<h2>事件传递的详细过程：</h2>

<p>主窗口会在视图层次结构中找到一个最合适的视图来处理触摸事件，但是这仅仅是整个事件处理过程的第一步 找到合适的视图控件后，就会调用视图控件的touches方法来作具体的事件处理</p>

<ul>
<li>touchesBegan…</li>
<li>touchesMoved…</li>
<li>touchedEnded…</li>
</ul>


<p>这些touches方法的默认做法是将事件顺着响应者链条向上传递，将事件交给上一个响应者进行处理
示例：</p>

<p><img src="../images/cdl.png" title="Title" alt="alt text" /></p>

<h2>响应者链条</h2>

<p><img src="../images/xyl.png" title="Title" alt="alt text" /></p>

<h2>事件传递的完整过程</h2>

<p>   先将事件对象由上往下传递(由父控件传递给子控件)，找到最合适的控件来处理这个事件。 调用最合适控件的touches….方法 如果调用了[super touches….];就会将事件顺着响应者链条往上传递，传递给上一个响应者 接着就会调用上一个响应者的touches….方法
如何判断上一个响应者
如果当前这个view是控制器的view,那么控制器就是上一个响应者 如果当前这个view不是控制器的view,那么父控件就是上一个响应者</p>

<h2>响应者链条的事件传递过程</h2>

<p>如果view是控制器的view，就传递给控制器；如不是，则将其传递给它的父视图 在视图层次结构的最顶级视图，如果也不能处理收到的事件或消息，则其将事件或消息传递给window对象进行处理 如果window对象也不处理，则其将事件或消息传递给UIApplication对象 如果UIApplication也不能处理该事件或消息，则将其丢弃</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Markdown 11种基本语法]]></title>
    <link href="http://baileidmm.github.io/blog/2015/07/05/cainiao/"/>
    <updated>2015-07-05T00:25:50+08:00</updated>
    <id>http://baileidmm.github.io/blog/2015/07/05/cainiao</id>
    <content type="html"><![CDATA[<ol>
<li><p>标题设置（让字体变大，和word的标题意思一样）
在Markdown当中设置标题，有两种方式：
第一种：通过在文字下方添加“=”和“-”，他们分别表示一级标题和二级标题。
第二种：在文字开头加上 “#”，通过“#”数量表示几级标题。（一共只有1~6级标题，1级标题字体最大）</p></li>
<li><p>块注释（blockquote）
通过在文字开头添加“>”表示块注释。（当>和文字之间添加五个blank时，块注释的文字会有变化。）</p></li>
<li><p>斜体
将需要设置为斜体的文字两端使用1个“*”或者“_”夹起来</p></li>
<li><p>粗体
将需要设置为斜体的文字两端使用2个“*”或者“_”夹起来</p></li>
<li><p>无序列表
在文字开头添加(<em>, +, and -)实现无序列表。但是要注意在(</em>, +, and -)和文字之间需要添加空格。（建议：一个文档中只是用一种无序列表的表示方式）</p></li>
<li><p>有序列表
使用数字后面跟上句号。（还要有空格）</p></li>
<li><p>链接（Links）
Markdown中有两种方式，实现链接，分别为内联方式和引用方式。
内联方式：This is an <a href="http://example.com/">example link</a>.
引用方式：
I get 10 times more traffic from <a href="http://google.com/" title="Google">Google</a> than from <a href="http://search.yahoo.com/" title="Yahoo Search">Yahoo</a> or <a href="http://search.msn.com/" title="MSN Search">MSN</a>.</p></li>
<li><p>图片（Images）
图片的处理方式和链接的处理方式，非常的类似。
内联方式：<img src="http://baileidmm.github.io/path/to/img.jpg" title="Title" alt="alt text" />
引用方式：
<img src="http://baileidmm.github.io/path/to/img.jpg" title="Title" alt="alt text" /></p></li>
<li><p>代码（HTML中所谓的Code）
实现方式有两种：
第一种：简单文字出现一个代码框。使用<code>&lt;blockquote&gt;</code>。（<code>不是单引号而是左上角的ESC下面~中的</code>）
第二种：大片文字需要实现代码框。使用Tab和四个空格。</p></li>
<li><p>脚注（footnote）
实现方式如下：
hello<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup></p></li>
<li><p>下划线
在空白行下方添加三条“-”横线。（前面讲过在文字下方添加“-”，实现的2级标题）</p></li>
</ol>

<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>hi<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
</feed>
